%%
%% DBLP + 著者名 などでググると BibTeX の書き方がヒットします．
%% DBLP の内容は比較的信用できますが，時々間違っているので注意が必要です．
%% 特に，論文タイトルなどで，固有名詞がちゃんと大文字になっていないことがあるので，
%% その場合は大文字にすべきところを {...} で囲って下さい．
%% （BibTeX では，先頭の文字を除いて，勝手に小文字に変換されます．）
%%
%% ex)  title = {OCaml for Numerical Analysis}
%% ==>  title = {{OC}aml for Numerical Analysis}
%%

%%（これは DBLP ではなく，Pierce の Web ページから持ってきたもの）
@book{Pierce:TypeSystems,
  author = {Benjamin C. Pierce},
  title = {Types and Programming Languages},
  publisher = {MIT Press},
  year = 2002,
  plclub = {Yes},
  bcp = {Yes},
  keys = {books},
  homepage = {http://www.cis.upenn.edu/~bcpierce/tapl},
  errata = {http://www.cis.upenn.edu/~bcpierce/tapl/errata.txt}
}

@InProceedings{10.1007/3-540-44898-5_4,
author="Boyland, John",
editor="Cousot, Radhia",
title="Checking Interference with Fractional Permissions",
booktitle="Static Analysis",
year="2003",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="55--72",
abstract="We describe a type system for checking interference using the concept of linear capabilities (which we call ``permissions''). Our innovations include the concept of ``fractional'' permissions: reads can be permitted with fractional permissions whereas writes require complete permissions. This distinction expresses the fact that reads on the same state do not conflict with each other. One may give shared read access at one point while still retaining write permission afterwards. We give an operational semantics of a simple imperative language with structured parallelism and prove that the permission system enables parallelism to proceed with deterministic results.",
isbn="978-3-540-44898-3"
}

@article{10.1145/3158154,
author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
title = {RustBelt: Securing the Foundations of the Rust Programming Language},
year = {2017},
issue_date = {January 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {POPL},
url = {https://doi.org/10.1145/3158154},
doi = {10.1145/3158154},
abstract = {Rust is a new systems programming language that promises to overcome the seemingly fundamental tradeoff between high-level safety guarantees and low-level control over resource management. Unfortunately, none of Rust's safety claims have been formally proven, and there is good reason to question whether they actually hold. Specifically, Rust employs a strong, ownership-based type system, but then extends the expressive power of this core type system through libraries that internally use unsafe features. In this paper, we give the first formal (and machine-checked) safety proof for a language representing a realistic subset of Rust. Our proof is extensible in the sense that, for each new Rust library that uses unsafe features, we can say what verification condition it must satisfy in order for it to be deemed a safe extension to the language. We have carried out this verification for some of the most important libraries that are used throughout the Rust ecosystem.},
journal = {Proc. ACM Program. Lang.},
month = {dec},
articleno = {66},
numpages = {34},
keywords = {concurrency, logical relations, Rust, separation logic, type systems}
}

@InProceedings{10.1007/978-3-642-10672-9_11,
author="Suenaga, Kohei
and Kobayashi, Naoki",
editor="Hu, Zhenjiang",
title="Fractional Ownerships for Safe Memory Deallocation",
booktitle="Programming Languages and Systems",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="128--143",
abstract="We propose a type system for a programming language with memory allocation/deallocation primitives, which prevents memory- related errors such as double-frees and memory leaks. The main idea is to augment pointer types with fractional ownerships, which express both capabilities and obligations to access or deallocate memory cells. By assigning an ownership to each pointer type constructor (rather than to a variable), our type system can properly reason about list/tree-manipulating programs. Furthermore, thanks to the use of fractions as ownerships, the type system admits a polynomial-time type inference algorithm, which serves as an algorithm for automatic verification of lack of memory-related errors. A prototype verifier has been implemented and tested for C programs.",
isbn="978-3-642-10672-9"
}

@InProceedings{10.1007/978-3-031-50521-8_11,
author="Nakayama, Takashi
and Matsushita, Yusuke
and Sakayori, Ken
and Sato, Ryosuke
and Kobayashi, Naoki",
editor="Dimitrova, Rayna
and Lahav, Ori
and Wolff, Sebastian",
title="Borrowable Fractional Ownership Types for Verification",
booktitle="Verification, Model Checking, and Abstract Interpretation",
year="2024",
publisher="Springer Nature Switzerland",
address="Cham",
pages="224--246",
abstract="Automated verification of functional correctness of imperative programs with references (a.k.a. pointers) is challenging because of reference aliasing. Ownership types have recently been applied to address this issue, but the existing approaches were limited in that they are effective only for a class of programs whose reference usage follows a certain style. To relax the limitation, we combine the approaches of ConSORT (based on fractional ownership) and RustHorn (based on borrowable ownership), two recent approaches to automated program verification based on ownership types, and propose the notion of borrowable fractional ownership types. We formalize a new type system based on the borrowable fractional ownership types and show how we can use it to automatically reduce the program verification problem for imperative programs with references to that for functional programs without references. We also show the soundness of our type system and the translation, and conduct experiments to confirm the effectiveness of our approach.",
isbn="978-3-031-50521-8"
}