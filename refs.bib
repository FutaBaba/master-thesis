%%
%% DBLP + 著者名 などでググると BibTeX の書き方がヒットします．
%% DBLP の内容は比較的信用できますが，時々間違っているので注意が必要です．
%% 特に，論文タイトルなどで，固有名詞がちゃんと大文字になっていないことがあるので，
%% その場合は大文字にすべきところを {...} で囲って下さい．
%% （BibTeX では，先頭の文字を除いて，勝手に小文字に変換されます．）
%%
%% ex)  title = {OCaml for Numerical Analysis}
%% ==>  title = {{OC}aml for Numerical Analysis}
%%

@inproceedings{DBLP:conf/sigada/MatsakisK14,
  author       = {Nicholas D. Matsakis and
                  Felix S. Klock II},
  editor       = {Michael B. Feldman and
                  S. Tucker Taft},
  title        = {The rust language},
  booktitle    = {Proceedings of the 2014 {ACM} SIGAda annual conference on High integrity
                  language technology, {HILT} 2014, Portland, Oregon, USA, October 18-21,
                  2014},
  pages        = {103--104},
  publisher    = {{ACM}},
  year         = {2014},
  url          = {https://doi.org/10.1145/2663171.2663188},
  doi          = {10.1145/2663171.2663188},
  timestamp    = {Fri, 02 Jun 2023 17:16:28 +0200},
  biburl       = {https://dblp.org/rec/conf/sigada/MatsakisK14.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/oopsla/ClarkePN98,
  author       = {David G. Clarke and
                  John Potter and
                  James Noble},
  editor       = {Bj{\o}rn N. Freeman{-}Benson and
                  Craig Chambers},
  title        = {Ownership Types for Flexible Alias Protection},
  booktitle    = {Proceedings of the 1998 {ACM} {SIGPLAN} Conference on Object-Oriented
                  Programming Systems, Languages {\&} Applications, {OOPSLA} 1998,
                  Vancouver, British Columbia, Canada, October 18-22, 1998},
  pages        = {48--64},
  publisher    = {{ACM}},
  year         = {1998},
  url          = {https://doi.org/10.1145/286936.286947},
  doi          = {10.1145/286936.286947},
  timestamp    = {Wed, 30 Mar 2022 13:58:30 +0200},
  biburl       = {https://dblp.org/rec/conf/oopsla/ClarkePN98.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/sas/Boyland03,
  author       = {John Boyland},
  editor       = {Radhia Cousot},
  title        = {Checking Interference with Fractional Permissions},
  booktitle    = {Static Analysis, 10th International Symposium, {SAS} 2003, San Diego,
                  CA, USA, June 11-13, 2003, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {2694},
  pages        = {55--72},
  publisher    = {Springer},
  year         = {2003},
  url          = {https://doi.org/10.1007/3-540-44898-5\_4},
  doi          = {10.1007/3-540-44898-5\_4},
  timestamp    = {Tue, 14 May 2019 10:00:52 +0200},
  biburl       = {https://dblp.org/rec/conf/sas/Boyland03.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/pacmpl/0002JKD18,
  author       = {Ralf Jung and
                  Jacques{-}Henri Jourdan and
                  Robbert Krebbers and
                  Derek Dreyer},
  title        = {Rust{B}elt: securing the foundations of the rust programming language},
  journal      = {Proc. {ACM} Program. Lang.},
  volume       = {2},
  number       = {{POPL}},
  pages        = {66:1--66:34},
  year         = {2018},
  url          = {https://doi.org/10.1145/3158154},
  doi          = {10.1145/3158154},
  timestamp    = {Sat, 30 Sep 2023 10:23:23 +0200},
  biburl       = {https://dblp.org/rec/journals/pacmpl/0002JKD18.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/978-3-642-10672-9_11,
author="Suenaga, Kohei
and Kobayashi, Naoki",
editor="Hu, Zhenjiang",
title="Fractional Ownerships for Safe Memory Deallocation",
booktitle="Programming Languages and Systems",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="128--143",
abstract="We propose a type system for a programming language with memory allocation/deallocation primitives, which prevents memory- related errors such as double-frees and memory leaks. The main idea is to augment pointer types with fractional ownerships, which express both capabilities and obligations to access or deallocate memory cells. By assigning an ownership to each pointer type constructor (rather than to a variable), our type system can properly reason about list/tree-manipulating programs. Furthermore, thanks to the use of fractions as ownerships, the type system admits a polynomial-time type inference algorithm, which serves as an algorithm for automatic verification of lack of memory-related errors. A prototype verifier has been implemented and tested for C programs.",
isbn="978-3-642-10672-9"
}

@InProceedings{10.1007/978-3-031-50521-8_11,
author="Nakayama, Takashi
and Matsushita, Yusuke
and Sakayori, Ken
and Sato, Ryosuke
and Kobayashi, Naoki",
editor="Dimitrova, Rayna
and Lahav, Ori
and Wolff, Sebastian",
title="Borrowable Fractional Ownership Types for Verification",
booktitle="Verification, Model Checking, and Abstract Interpretation",
year="2024",
publisher="Springer Nature Switzerland",
address="Cham",
pages="224--246",
abstract="Automated verification of functional correctness of imperative programs with references (a.k.a. pointers) is challenging because of reference aliasing. Ownership types have recently been applied to address this issue, but the existing approaches were limited in that they are effective only for a class of programs whose reference usage follows a certain style. To relax the limitation, we combine the approaches of ConSORT (based on fractional ownership) and RustHorn (based on borrowable ownership), two recent approaches to automated program verification based on ownership types, and propose the notion of borrowable fractional ownership types. We formalize a new type system based on the borrowable fractional ownership types and show how we can use it to automatically reduce the program verification problem for imperative programs with references to that for functional programs without references. We also show the soundness of our type system and the translation, and conduct experiments to confirm the effectiveness of our approach.",
isbn="978-3-031-50521-8"
}

@article{DBLP:journals/cacm/CouroisHP71,
  author       = {Pierre{-}Jacques Courtois and
                  F. Heymans and
                  David Lorge Parnas},
  title        = {Concurrent Control with "Readers" and "Writers"},
  journal      = {Commun. {ACM}},
  volume       = {14},
  number       = {10},
  pages        = {667--668},
  year         = {1971},
  url          = {https://doi.org/10.1145/362759.362813},
  doi          = {10.1145/362759.362813},
  timestamp    = {Tue, 06 Nov 2018 12:51:36 +0100},
  biburl       = {https://dblp.org/rec/journals/cacm/CouroisHP71.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}